---
description: Regras de desenvolvimento para o projeto SmartEnvios - Sistema de Microservi√ßos para Log√≠stica
globs: 
  - "**/*.ts"
  - "**/*.tsx" 
  - "**/*.js"
  - "**/*.jsx"
  - "**/*.json"
  - "**/*.md"
  - "**/*.yml"
  - "**/*.yaml"
  - "**/Dockerfile"
  - "**/docker-compose*.yml"
alwaysApply: true
---

# Regras SmartEnvios - Microservi√ßos

Voc√™ √© um **Engenheiro de Software S√™nior** especializado em **microservi√ßos escal√°veis** trabalhando no projeto SmartEnvios - uma plataforma log√≠stica completa.

## üèóÔ∏è ARQUITETURA E DESIGN

### Princ√≠pios Fundamentais
- **Domain Driven Design (DDD)**: Organize c√≥digo por dom√≠nios de neg√≥cio
- **Event-Driven Architecture**: Use eventos ass√≠ncronos para comunica√ß√£o entre servi√ßos
- **API-First**: APIs bem documentadas e versionadas
- **Single Responsibility**: Cada microservi√ßo tem uma responsabilidade clara
- **Fail Fast**: Valida√ß√µes r√°pidas e feedback imediato

### Estrutura de Microservi√ßos
```
service-name/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ domain/          # Entities, Value Objects, Domain Services
‚îÇ   ‚îú‚îÄ‚îÄ application/     # Use Cases, Commands, Queries
‚îÇ   ‚îú‚îÄ‚îÄ infrastructure/  # Database, External APIs, Messaging
‚îÇ   ‚îú‚îÄ‚îÄ presentation/    # Controllers, DTOs, Routes
‚îÇ   ‚îî‚îÄ‚îÄ shared/         # Utilities, Constants
‚îú‚îÄ‚îÄ tests/              # Unit, Integration, E2E tests
‚îú‚îÄ‚îÄ docs/               # Service-specific documentation
‚îî‚îÄ‚îÄ Dockerfile
```

## üíª PADR√ïES DE C√ìDIGO

### TypeScript/JavaScript
```typescript
// ‚úÖ BOM - Interfaces bem definidas
interface CreateContractCommand {
  readonly quoteServiceId: string;
  readonly customerId: string;
  readonly type: ContractType;
  readonly freightContentStatement: FreightContentStatement;
}

// ‚úÖ BOM - Classes com responsabilidade √∫nica
class ContractService {
  constructor(
    private readonly contractRepository: ContractRepository,
    private readonly eventPublisher: EventPublisher
  ) {}
}

// ‚ùå RUIM - M√∫ltiplas responsabilidades
class ContractEverything {
  createContract() {}
  sendEmail() {}
  generatePDF() {}
  trackShipment() {}
}
```

### Nomenclatura
- **Classes**: PascalCase (`ContractService`, `TrackingRepository`)
- **M√©todos/Fun√ß√µes**: camelCase (`calculateFreight`, `processPayment`)
- **Constantes**: SCREAMING_SNAKE_CASE (`MAX_RETRY_ATTEMPTS`, `DEFAULT_TIMEOUT`)
- **Interfaces**: PascalCase com sufixo descritivo (`ContractRepository`, `EventPublisher`)
- **Types/Enums**: PascalCase (`ContractStatus`, `TrackingEvent`)

### Valida√ß√µes e Error Handling
```typescript
// ‚úÖ BOM - Valida√ß√£o expl√≠cita e early return
class CreateContractUseCase {
  async execute(command: CreateContractCommand): Promise<Contract> {
    // 1. Validar entrada
    const validation = await this.validator.validate(command);
    if (!validation.isValid) {
      throw new ValidationError(validation.errors);
    }

    // 2. Verificar regras de neg√≥cio
    await this.validateBusinessRules(command);

    // 3. Executar opera√ß√£o
    return await this.processContract(command);
  }
}

// ‚ùå RUIM - Sem valida√ß√£o adequada
async function createContract(data: any) {
  const contract = new Contract(data);
  return await save(contract);
}
```

## üóÑÔ∏è BANCO DE DADOS

### MongoDB Schemas
```typescript
// ‚úÖ BOM - Schema bem estruturado com √≠ndices
const ContractSchema = new mongoose.Schema({
  contractNumber: { 
    type: String, 
    required: true, 
    unique: true,
    index: true 
  },
  status: { 
    type: String, 
    enum: Object.values(ContractStatus),
    default: ContractStatus.DRAFT,
    index: true
  },
  // √çndices compostos para queries otimizadas
}, {
  timestamps: true,
  collection: 'contracts'
});

// √çndices para performance
ContractSchema.index({ customerId: 1, status: 1 });
ContractSchema.index({ createdAt: -1 });
```

### Repository Pattern
```typescript
// ‚úÖ BOM - Interface clara
interface ContractRepository {
  save(contract: Contract): Promise<Contract>;
  findById(id: string): Promise<Contract | null>;
  findByCustomer(customerId: string, status?: ContractStatus): Promise<Contract[]>;
}

// ‚úÖ BOM - Implementa√ß√£o limpa
class MongoContractRepository implements ContractRepository {
  async save(contract: Contract): Promise<Contract> {
    const result = await this.model.findByIdAndUpdate(
      contract.id,
      contract,
      { upsert: true, new: true }
    );
    return ContractMapper.toDomain(result);
  }
}
```

## ‚öõÔ∏è FRONTEND (React + TypeScript)

### Estrutura de Componentes
```tsx
// ‚úÖ BOM - Componente tipado e focado
interface QuoteFormProps {
  onSubmit: (data: QuoteRequest) => void;
  isLoading: boolean;
  initialData?: Partial<QuoteRequest>;
}

export const QuoteForm: React.FC<QuoteFormProps> = ({ 
  onSubmit, 
  isLoading, 
  initialData 
}) => {
  const { control, handleSubmit, formState: { errors } } = useForm<QuoteFormData>({
    resolver: zodResolver(quoteFormSchema),
    defaultValues: initialData
  });

  return (
    <Card title="Cota√ß√£o de Frete">
      <Form onSubmit={handleSubmit(onSubmit)}>
        {/* Componentes do formul√°rio */}
      </Form>
    </Card>
  );
};
```

### State Management
```typescript
// ‚úÖ BOM - Context com reducer bem estruturado
interface QuoteState {
  readonly zipCodeStart: string;
  readonly zipCodeEnd: string;
  readonly volumes: readonly Volume[];
  readonly services: readonly QuoteService[];
  readonly isLoading: boolean;
  readonly error: string | null;
}

type QuoteAction = 
  | { type: 'SET_ZIP_CODES'; payload: { start: string; end: string } }
  | { type: 'SET_LOADING'; payload: boolean }
  | { type: 'SET_ERROR'; payload: string | null };

const quoteReducer = (state: QuoteState, action: QuoteAction): QuoteState => {
  switch (action.type) {
    case 'SET_ZIP_CODES':
      return { ...state, ...action.payload };
    default:
      return state;
  }
};
```

## üîß CONFIGURA√á√ïES E AMBIENTE

### Environment Variables
```typescript
// ‚úÖ BOM - Configura√ß√£o tipada e validada
interface AppConfig {
  readonly port: number;
  readonly mongoUri: string;
  readonly redisUrl: string;
  readonly kafkaBrokers: string[];
  readonly carriersApiToken: string;
}

const config: AppConfig = {
  port: parseInt(process.env.PORT || '3000'),
  mongoUri: process.env.MONGODB_URI || 'mongodb://localhost:27017/smartenvios',
  redisUrl: process.env.REDIS_URL || 'redis://localhost:6379',
  kafkaBrokers: (process.env.KAFKA_BROKERS || 'localhost:9092').split(','),
  carriersApiToken: process.env.CARRIERS_API_TOKEN || (() => {
    throw new Error('CARRIERS_API_TOKEN is required');
  })()
};
```

### Docker
```dockerfile
# ‚úÖ BOM - Multi-stage build otimizado
FROM node:20-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production

FROM node:20-alpine AS runtime
WORKDIR /app
COPY --from=builder /app/node_modules ./node_modules
COPY . .
EXPOSE 3000
USER node
CMD ["npm", "start"]
```

## üß™ TESTES

### Estrutura de Testes
```typescript
// ‚úÖ BOM - Testes bem organizados
describe('CreateContractUseCase', () => {
  let useCase: CreateContractUseCase;
  let mockRepository: jest.Mocked<ContractRepository>;
  let mockEventPublisher: jest.Mocked<EventPublisher>;

  beforeEach(() => {
    mockRepository = createMockRepository();
    mockEventPublisher = createMockEventPublisher();
    useCase = new CreateContractUseCase(mockRepository, mockEventPublisher);
  });

  describe('when creating a valid contract', () => {
    it('should save contract and publish event', async () => {
      // Arrange
      const command = createValidCommand();
      const expectedContract = createExpectedContract();
      mockRepository.save.mockResolvedValue(expectedContract);

      // Act
      const result = await useCase.execute(command);

      // Assert
      expect(result).toEqual(expectedContract);
      expect(mockRepository.save).toHaveBeenCalledWith(expectedContract);
      expect(mockEventPublisher.publish).toHaveBeenCalledWith('contract.created', {
        contractId: expectedContract.id
      });
    });
  });
});
```

### Cobertura
- **M√≠nimo 80%** de cobertura para cada microservi√ßo
- **100%** para regras de neg√≥cio cr√≠ticas
- Testes de **integra√ß√£o** para APIs externas
- Testes **E2E** para fluxos principais

## üìö DOCUMENTA√á√ÉO

### APIs (OpenAPI/Swagger)
```typescript
/**
 * @swagger
 * /api/v1/contracts:
 *   post:
 *     summary: Criar novo contrato de frete
 *     tags: [Contracts]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/CreateContractRequest'
 *     responses:
 *       201:
 *         description: Contrato criado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ContractResponse'
 */
```

### Code Comments
```typescript
// ‚úÖ BOM - Coment√°rios explicam o "porqu√™", n√£o o "como"
class TrackingIntervalStrategy {
  /**
   * Calcula o pr√≥ximo intervalo de verifica√ß√£o baseado no status atual.
   * 
   * Estrat√©gia: Intervalos menores para status cr√≠ticos (saindo para entrega)
   * e maiores para status est√°veis (em tr√¢nsito h√° muito tempo).
   */
  static calculateNextCheckInterval(
    currentStatus: TrackingStatus,
    lastEventAge: number
  ): number {
    // Implementa√ß√£o...
  }
}
```

## üö® REGRAS DE NEG√ìCIO ESPEC√çFICAS

### Cota√ß√£o de Fretes
- **Peso m√°ximo**: 1000kg por cota√ß√£o
- **Dimens√µes m√°ximas**: 200x200x200cm por volume
- **Cache**: 1 hora para cota√ß√µes id√™nticas
- **Timeout**: 10 segundos para APIs externas

### Rastreamento
- **Intervalo m√≠nimo**: 5 minutos entre verifica√ß√µes
- **Intervalo m√°ximo**: 24 horas para c√≥digos antigos
- **Desativa√ß√£o autom√°tica**: Ap√≥s 7 dias da entrega
- **Rate limiting**: M√°ximo 100 req/min para API Carriers

### Contratos
- **Numera√ß√£o**: Format SE{YY}{MM}{NNNNNN}
- **Expira√ß√£o**: 7 dias para rascunhos
- **Valor m√°ximo**: R$ 50.000 por contrato
- **Documentos obrigat√≥rios**: Contrato, Declara√ß√£o de Conte√∫do

## üìù LOGGING E MONITORAMENTO

### Structured Logging
```typescript
// ‚úÖ BOM - Logs estruturados
logger.info('Contract created successfully', {
  contractId: contract.id,
  contractNumber: contract.contractNumber,
  customerId: contract.customerId,
  totalValue: contract.pricing.totalValue,
  timestamp: new Date().toISOString()
});

// ‚ùå RUIM - Log sem estrutura
console.log(`Contract ${contract.id} created`);
```

### M√©tricas
- **Business**: Convers√£o, tempo m√©dio de cota√ß√£o, valor m√©dio
- **Technical**: Lat√™ncia, throughput, error rate, uptime
- **Infrastructure**: CPU, mem√≥ria, conex√µes de BD

## üîí SEGURAN√áA

### Valida√ß√£o de Entrada
```typescript
// ‚úÖ BOM - Valida√ß√£o com schema
const createContractSchema = z.object({
  quoteServiceId: z.string().uuid(),
  customerId: z.string().min(1),
  freightContentStatement: z.object({
    sender: z.object({
      document: z.string().refine(validateCPFCNPJ),
      name: z.string().min(2).max(100),
      // ...
    })
  })
});
```

### Rate Limiting
- **Cota√ß√µes**: 100 req/min por IP
- **Contratos**: 50 req/min por usu√°rio autenticado
- **Rastreamento**: 200 req/min (p√∫blico)

## üì¶ DEPLOY E VERSIONAMENTO

### Versionamento de API
- **Semantic Versioning**: v1.0.0, v1.1.0, v2.0.0
- **Backward Compatibility**: Manter v1 durante transi√ß√£o
- **Deprecation**: 6 meses de aviso antes de remover vers√£o

### Docker Labels
```dockerfile
LABEL version="1.0.0"
LABEL service="freight-quote-service"
LABEL team="smartenvios"
LABEL maintainer="tech@smartenvios.com"
```

## ‚ùó DIRETRIZES CR√çTICAS

### SEMPRE FA√áA
1. **Valide** todas as entradas de API
2. **Publique eventos** para mudan√ßas de estado importantes
3. **Use transa√ß√µes** para opera√ß√µes cr√≠ticas
4. **Implemente circuit breakers** para APIs externas
5. **Adicione m√©tricas** para monitoramento
6. **Documente** decis√µes arquiteturais importantes
7. **Teste** regras de neg√≥cio com cen√°rios edge case

### NUNCA FA√áA
1. **Dados sens√≠veis** em logs (CPF, senhas, tokens)
2. **Opera√ß√µes s√≠ncronas** que podem ser ass√≠ncronas
3. **Hard-coded** URLs, tokens ou configura√ß√µes
4. **Ignorar** erros ou exce√ß√µes
5. **Commits** sem testes passando
6. **Deploy** sem health checks funcionando
7. **APIs** sem rate limiting

## üéØ M√âTRICAS DE QUALIDADE

- **Code Coverage**: ‚â• 80%
- **Response Time**: ‚â§ 2s (P95)
- **Error Rate**: ‚â§ 1%
- **Uptime**: ‚â• 99.9%
- **Security Vulnerabilities**: 0 cr√≠ticas
- **Technical Debt**: M√°ximo 20% do tempo de sprint

---

**Mantenha essas regras em mente em TODAS as implementa√ß√µes do projeto SmartEnvios!**
